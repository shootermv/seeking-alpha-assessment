{"version":3,"sources":["logo.svg","Cell.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Cell","i","className","grid","Array","map","len","length","liveCells","Math","floor","random","checkSurrounds","x","y","counter","checkCell","App","useState","setCounter","setTimeout","forEach","row","fill","_liveCells","col","push","prepareLiveCells","src","logo","alt","href","target","rel","flat","idx","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gIAAAA,EAAOC,QAAU,IAA0B,kC,yMCO5BC,G,YAHsB,SAAC,GAAD,IAAEC,EAAF,EAAEA,EAAF,OAAU,yBAAKC,UAAWD,EAAI,OAAS,OCCtEE,EAAO,YAAIC,MAAM,KAAKC,KAAI,8BAAUD,MAAM,QAM1CE,EAAMH,EAAK,GAAGI,OAAS,EAEzBC,EAAY,YAAIJ,MAAM,OAAOC,KAAI,8BAL5B,CAACI,KAAKC,MAAsB,GAAhBD,KAAKE,UAAgBF,KAAKC,MAAsB,GAAhBD,KAAKE,eAa7CC,EAAiB,SAACC,EAAWC,EAAWX,EAAkBG,GACrE,IAAIS,EAAU,EAWd,OAVIF,EAAI,IAAGE,GAAWZ,EAAKW,GAAGD,EAAI,IAC9BA,EAAIP,IAAKS,GAAWZ,EAAKW,GAAGD,EAAI,IAEhCC,EAAIR,GAAOO,EAAI,IAAGE,GAAWZ,EAAKW,EAAI,GAAGD,EAAI,IAC7CC,EAAIR,IAAKS,GAAWZ,EAAKW,EAAI,GAAGD,IAChCC,EAAIR,GAAOO,EAAIP,IAAKS,GAAWZ,EAAKW,EAAI,GAAGD,EAAI,IAE/CC,EAAI,GAAKD,EAAI,IAAGE,GAAWZ,EAAKW,EAAI,GAAGD,EAAI,IAC3CC,EAAI,IAAGC,GAAWZ,EAAKW,EAAI,GAAGD,IAC9BC,EAAI,GAAKD,EAAIP,IAAKS,GAAWZ,EAAKW,EAAI,GAAGD,EAAI,IAC1CE,GAGIC,EAAY,SAACH,EAAWC,EAAWX,EAAkBS,EAA0BN,GAC1F,IAAIS,EAAUH,EAAeC,EAAGC,EAAGX,EAAMG,GACzC,OAAoB,IAAZS,GAAiBZ,EAAKW,GAAGD,IAAmB,IAAZE,GA4C3BE,EAhCO,WAAM,MAEIC,mBAAS,GAFb,mBAEnBH,EAFmB,KAEVI,EAFU,KAQ1B,OALAC,YAAW,WArCgB,IAACZ,EAAuBL,EAAvBK,EAsCZA,GAtCmCL,EAsCxBA,GArCtBkB,SAAQ,SAAAC,GAAG,OAAIA,EAAIC,KAAK,MAC7Bf,EAAUa,SAAQ,mCAAER,EAAF,KAAKC,EAAL,YAAaX,EAAKW,GAAGD,GAAK,KAqC1CL,EAb4B,SAACQ,EAAqBb,EAAkBS,EAA0BN,GAChG,IAAMkB,EAAyB,GAI/B,OAHArB,EAAKkB,SAAQ,SAACC,EAAKR,GAAN,OACXQ,EAAID,SAAQ,SAACI,EAAKZ,GAAN,OAAYG,EAAUH,EAAGC,EAAGX,EAAMS,EAAgBN,IAAQkB,EAAWE,KAAK,CAACb,EAAGC,UAErFU,EAQOG,CAAiBX,EAAWb,EAAMS,EAAgBN,GAC9Da,EAAWJ,EAAU,KACpB,KAED,6BACE,4BAAQb,UAAU,cAChB,yBAAK0B,IAAKC,IAAM3B,UAAU,WAAW4B,IAAI,SAEzC,uBACE5B,UAAU,WACV6B,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBASF,yBAAK/B,UAAU,OACZC,EAAK+B,KAAK,GAAG7B,KAAI,SAACJ,EAAGkC,GAAJ,OAChB,kBAAC,EAAD,CAAMC,IAAG,cAASD,GAAOlC,EAAGA,UC9DlBoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4bef4b2b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nimport './Cell.css';\n\nconst Cell: React.FC<{i: Boolean}> = ({i}) => (<div className={i ? 'live' : ''}/>);\n\n\nexport default Cell;","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Cell from \"./Cell\";\n\nconst grid = [...Array(50)].map(() => [...Array(50)]);\n// generates array of 2 random coordinates\nconst rand = () => {\n  return [Math.floor(Math.random() * 49), Math.floor(Math.random() * 49)];\n};\n\nconst len = grid[0].length - 1;\n// generate randomally 1500 live cells\nlet liveCells = [...Array(1500)].map(() => [...rand()]);\n\n// sets live cells to \"1\" (so they becomes live)\nexport const drawLiveCells = (liveCells: number[][], grid: number[][]) => {\n  grid.forEach(row => row.fill(0)); //fill all grid with zeros\n  liveCells.forEach(([x, y]) => (grid[y][x] = 1));\n};\n// checks all 8 surrondings cells around the cell and counts the 'live' cells\nexport const checkSurrounds = (x: number, y: number, grid: number[][], len: number) => {\n  let counter = 0;\n  if (x > 0) counter += grid[y][x - 1];\n  if (x < len) counter += grid[y][x + 1];\n\n  if (y < len && x > 0) counter += grid[y + 1][x - 1];\n  if (y < len) counter += grid[y + 1][x];\n  if (y < len && x < len) counter += grid[y + 1][x + 1];\n\n  if (y > 0 && x > 0) counter += grid[y - 1][x - 1];\n  if (y > 0) counter += grid[y - 1][x];\n  if (y > 0 && x < len) counter += grid[y - 1][x + 1];\n  return counter;\n};\n// checks the cell and returns 'true' or 'false' indication whether this cell should consider \"live\" at next tick\nexport const checkCell = (x: number, y: number, grid: number[][], checkSurrounds: Function, len: number) => {\n  let counter = checkSurrounds(x, y, grid, len);\n  return (counter === 2 && grid[y][x]) || counter === 3;\n};\n// goes through every cell at grid and checks if it should become \"live\" \n// if it is - the cell coordinates added to array being returned\nexport const prepareLiveCells = (checkCell: Function, grid: number[][], checkSurrounds: Function, len: number) => {\n  const _liveCells: number[][] = [];\n  grid.forEach((row, y) =>\n    row.forEach((col, x) => checkCell(x, y, grid, checkSurrounds, len) && _liveCells.push([x, y]))\n  );\n  return _liveCells;\n};\n\nconst App: React.FC = () => {\n  // counter uses to trigger 'rerendering'\n  const [counter, setCounter] = useState(0);\n  setTimeout(() => {\n    drawLiveCells(liveCells, grid);\n    liveCells = prepareLiveCells(checkCell, grid, checkSurrounds, len);\n    setCounter(counter + 1);\n  }, 1000);\n  return (\n    <div>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <div className=\"App\">\n        {grid.flat(1).map((i, idx) => (\n          <Cell key={`key-${idx}`} i={i} />\n        ))}\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}